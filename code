# code  #

import React, { useState, useEffect } from 'react';
import { Cloud, Droplets, Sun, Wind, Thermometer, AlertTriangle, TrendingUp, Calendar, MapPin, Leaf, Settings, ChevronRight, CloudRain, Info } from 'lucide-react';

const ClimateResilientFarmingAdvisor = () => {
  const [activeTab, setActiveTab] = useState('dashboard');
  const [location, setLocation] = useState('Secunderabad, Telangana');
  const [farmSize, setFarmSize] = useState('2.5');
  const [currentCrop, setCurrentCrop] = useState('rice');
  const [soilType, setSoilType] = useState('clay-loam');
  const [alerts, setAlerts] = useState([]);
  const [weatherData, setWeatherData] = useState(null);
  const [loading, setLoading] = useState(true);
  
  const API_KEY = '7ab586f7803749f28b670509253110';
  const CITY = 'Secunderabad';

  // Fetch real weather data
  useEffect(() => {
    const fetchWeather = async () => {
      try {
        setLoading(true);
        const response = await fetch(
          https://api.weatherapi.com/v1/forecast.json?key=${API_KEY}&q=${CITY}&days=5&aqi=no
        );
        const data = await response.json();
        
        setWeatherData({
          current: {
            temp: Math.round(data.current.temp_c),
            humidity: data.current.humidity,
            rainfall: data.current.precip_mm,
            wind: Math.round(data.current.wind_kph),
            condition: data.current.condition.text
          },
          forecast: data.forecast.forecastday.map((day, idx) => {
            const date = new Date(day.date);
            const dayName = idx === 0 ? 'Today' : date.toLocaleDateString('en-US', { weekday: 'short' });
            const rainChance = day.day.daily_chance_of_rain;
            let icon = 'sun';
            if (rainChance > 60) icon = 'rain';
            else if (rainChance > 30) icon = 'cloud';
            
            return {
              day: dayName,
              temp: Math.round(day.day.avgtemp_c),
              rain: rainChance,
              icon: icon
            };
          }),
          weekly: {
            totalRainfall: data.forecast.forecastday.reduce((sum, day) => sum + day.day.totalprecip_mm, 0).toFixed(1),
            avgTemp: Math.round(data.forecast.forecastday.reduce((sum, day) => sum + day.day.avgtemp_c, 0) / data.forecast.forecastday.length),
            extremeWeatherRisk: 'moderate'
          }
        });
        
        // Generate alerts based on real weather
        const newAlerts = [];
        if (data.forecast.forecastday[0].day.daily_chance_of_rain > 70) {
          newAlerts.push({ id: 1, message: 'High rainfall expected - Review drainage systems', severity: 'high' });
        }
        if (data.current.humidity > 70) {
          newAlerts.push({ id: 2, message: 'High humidity - Pest attack risk increases', severity: 'medium' });
        }
        setAlerts(newAlerts);
        
        setLoading(false);
      } catch (error) {
        console.error('Error fetching weather:', error);
        // Fallback to default data
        setWeatherData({
          current: { temp: 32, humidity: 68, rainfall: 0, wind: 12, condition: 'Partly Cloudy' },
          forecast: [
            { day: 'Today', temp: 32, rain: 20, icon: 'sun' },
            { day: 'Tomorrow', temp: 31, rain: 40, icon: 'cloud' },
            { day: 'Sat', temp: 29, rain: 70, icon: 'rain' },
            { day: 'Sun', temp: 28, rain: 80, icon: 'rain' },
            { day: 'Mon', temp: 30, rain: 50, icon: 'cloud' }
          ],
          weekly: { totalRainfall: 45, avgTemp: 30, extremeWeatherRisk: 'moderate' }
        });
        setLoading(false);
      }
    };
    
    fetchWeather();
  }, []);

  // Soil health data
  const soilHealth = {
    moisture: 45,
    ph: 6.8,
    nitrogen: 'Medium',
    phosphorus: 'Low',
    potassium: 'High',
    organicMatter: 2.3
  };

  // Crop recommendations
  const cropRecommendations = [
    {
      name: 'Bajra (Pearl Millet)',
      suitability: 95,
      season: 'Kharif',
      waterNeed: 'Low',
      resilience: 'High',
      expectedYield: '1.2-1.5 tons/acre',
      reason: 'Drought-resistant, ideal for upcoming dry spell'
    },
    {
      name: 'Pigeon Pea (Arhar)',
      suitability: 88,
      season: 'Kharif',
      waterNeed: 'Medium',
      resilience: 'High',
      expectedYield: '0.8-1.0 tons/acre',
      reason: 'Nitrogen-fixing, improves soil health'
    },
    {
      name: 'Green Gram (Moong)',
      suitability: 82,
      season: 'Summer',
      waterNeed: 'Low',
      resilience: 'Medium',
      expectedYield: '0.5-0.7 tons/acre',
      reason: 'Short duration, good for rotation'
    }
  ];

  // Advisory recommendations
  const advisories = [
    {
      type: 'urgent',
      title: 'Heavy Rainfall Alert',
      description: 'Expected 60-80mm rainfall in next 48 hours',
      action: 'Ensure proper drainage, postpone fertilizer application',
      icon: AlertTriangle,
      color: 'text-red-600'
    },
    {
      type: 'important',
      title: 'Optimal Sowing Window',
      description: 'Next 5-7 days ideal for Kharif crops',
      action: 'Prepare land for sowing after rainfall',
      icon: Calendar,
      color: 'text-orange-600'
    },
    {
      type: 'info',
      title: 'Soil Amendment Needed',
      description: 'Phosphorus levels below optimal',
      action: 'Apply DAP fertilizer @ 50kg/acre',
      icon: Leaf,
      color: 'text-blue-600'
    }
  ];

  // Water management
  const waterManagement = {
    currentStatus: 'Adequate',
    irrigation: {
      recommended: 'Drip irrigation',
      frequency: 'Every 3-4 days',
      amount: '25mm per irrigation'
    },
    rainwaterHarvesting: {
      potential: '45,000 liters',
      recommendation: 'Install farm pond or check dam'
    }
  };



  const Dashboard = () => {
    if (loading || !weatherData) {
      return (
        <div className="flex items-center justify-center h-64">
          <div className="text-center">
            <div className="animate-spin rounded-full h-12 w-12 border-b-2 border-green-600 mx-auto mb-4"></div>
            <p className="text-gray-600">Loading weather data...</p>
          </div>
        </div>
      );
    }
    
    return (
    <div className="space-y-6">
      {/* Current Weather Card */}
      <div className="bg-gradient-to-br from-blue-500 to-blue-600 rounded-xl p-6 text-white shadow-lg">
        <div className="flex items-start justify-between">
          <div>
            <div className="flex items-center gap-2 mb-2">
              <MapPin className="w-4 h-4" />
              <p className="text-sm opacity-90">{location}</p>
            </div>
            <h2 className="text-5xl font-bold mb-2">{weatherData.current.temp}°C</h2>
            <p className="text-lg opacity-90">{weatherData.current.condition}</p>
          </div>
          <Sun className="w-16 h-16 opacity-80" />
        </div>
        
        <div className="grid grid-cols-3 gap-4 mt-6 pt-4 border-t border-white/20">
          <div className="flex items-center gap-2">
            <Droplets className="w-4 h-4" />
            <div>
              <p className="text-xs opacity-75">Humidity</p>
              <p className="font-semibold">{weatherData.current.humidity}%</p>
            </div>
          </div>
          <div className="flex items-center gap-2">
            <Wind className="w-4 h-4" />
            <div>
              <p className="text-xs opacity-75">Wind</p>
              <p className="font-semibold">{weatherData.current.wind} km/h</p>
            </div>
          </div>
          <div className="flex items-center gap-2">
            <CloudRain className="w-4 h-4" />
            <div>
              <p className="text-xs opacity-75">Rain</p>
              <p className="font-semibold">{weatherData.current.rainfall} mm</p>
            </div>
          </div>
        </div>
      </div>

      {/* Critical Alerts */}
      {alerts.length > 0 && (
        <div className="bg-red-50 border-l-4 border-red-500 p-4 rounded-lg">
          <div className="flex items-start gap-3">
            <AlertTriangle className="w-5 h-5 text-red-600 flex-shrink-0 mt-0.5" />
            <div className="flex-1">
              <h3 className="font-semibold text-red-900 mb-1">Active Alerts</h3>
              {alerts.map(alert => (
                <p key={alert.id} className="text-sm text-red-800">{alert.message}</p>
              ))}
            </div>
          </div>
        </div>
      )}

      {/* 5-Day Forecast */}
      <div className="bg-white rounded-xl p-6 shadow-md">
        <h3 className="font-semibold text-lg mb-4">5-Day Forecast</h3>
        <div className="grid grid-cols-5 gap-3">
          {weatherData.forecast.map((day, idx) => (
            <div key={idx} className="text-center p-3 bg-gray-50 rounded-lg">
              <p className="text-sm font-medium text-gray-600 mb-2">{day.day}</p>
              {day.icon === 'sun' && <Sun className="w-8 h-8 mx-auto text-yellow-500 mb-2" />}
              {day.icon === 'cloud' && <Cloud className="w-8 h-8 mx-auto text-gray-400 mb-2" />}
              {day.icon === 'rain' && <CloudRain className="w-8 h-8 mx-auto text-blue-500 mb-2" />}
              <p className="font-semibold text-lg">{day.temp}°</p>
              <p className="text-xs text-blue-600 mt-1">{day.rain}% rain</p>
            </div>
          ))}
        </div>
      </div>

      {/* Quick Stats */}
      <div className="grid grid-cols-2 gap-4">
        <div className="bg-white rounded-xl p-4 shadow-md">
          <div className="flex items-center justify-between mb-2">
            <h4 className="text-sm font-medium text-gray-600">Weekly Rainfall</h4>
            <Droplets className="w-5 h-5 text-blue-500" />
          </div>
          <p className="text-2xl font-bold text-gray-900">{weatherData.weekly.totalRainfall}mm</p>
          <p className="text-xs text-gray-500 mt-1">Last 7 days</p>
        </div>
        
        <div className="bg-white rounded-xl p-4 shadow-md">
          <div className="flex items-center justify-between mb-2">
            <h4 className="text-sm font-medium text-gray-600">Soil Moisture</h4>
            <Leaf className="w-5 h-5 text-green-500" />
          </div>
          <p className="text-2xl font-bold text-gray-900">{soilHealth.moisture}%</p>
          <p className="text-xs text-gray-500 mt-1">Adequate level</p>
        </div>
      </div>

      {/* Today's Advisories */}
      <div className="bg-white rounded-xl p-6 shadow-md">
        <h3 className="font-semibold text-lg mb-4">Today's Advisory</h3>
        <div className="space-y-3">
          {advisories.map((advisory, idx) => {
            const Icon = advisory.icon;
            return (
              <div key={idx} className="flex gap-3 p-3 bg-gray-50 rounded-lg">
                <Icon className={w-5 h-5 ${advisory.color} flex-shrink-0 mt-0.5} />
                <div className="flex-1">
                  <h4 className="font-semibold text-sm text-gray-900">{advisory.title}</h4>
                  <p className="text-sm text-gray-600 mt-1">{advisory.description}</p>
                  <p className="text-sm text-gray-700 font-medium mt-2">→ {advisory.action}</p>
                </div>
              </div>
            );
          })}
        </div>
      </div>
    </div>
    );
  };

  const CropAdvisor = () => (
    <div className="space-y-6">
      <div className="bg-white rounded-xl p-6 shadow-md">
        <h3 className="font-semibold text-lg mb-4">Current Crop Status</h3>
        <div className="bg-green-50 p-4 rounded-lg border border-green-200">
          <div className="flex items-center justify-between mb-3">
            <div>
              <p className="text-sm text-gray-600">Growing</p>
              <p className="text-xl font-bold text-gray-900 capitalize">{currentCrop}</p>
            </div>
            <div className="bg-green-100 p-3 rounded-full">
              <Leaf className="w-6 h-6 text-green-600" />
            </div>
          </div>
          <div className="grid grid-cols-3 gap-3 text-sm">
            <div>
              <p className="text-gray-600">Growth Stage</p>
              <p className="font-semibold">Vegetative</p>
            </div>
            <div>
              <p className="text-gray-600">Days to Harvest</p>
              <p className="font-semibold">45 days</p>
            </div>
            <div>
              <p className="text-gray-600">Health Score</p>
              <p className="font-semibold text-green-600">8.2/10</p>
            </div>
          </div>
        </div>
      </div>

      <div className="bg-white rounded-xl p-6 shadow-md">
        <h3 className="font-semibold text-lg mb-4">Climate-Resilient Crop Recommendations</h3>
        <p className="text-sm text-gray-600 mb-4">Based on upcoming weather patterns, soil conditions, and market demand</p>
        
        <div className="space-y-4">
          {cropRecommendations.map((crop, idx) => (
            <div key={idx} className="border border-gray-200 rounded-lg p-4 hover:border-green-500 transition-colors">
              <div className="flex items-start justify-between mb-3">
                <div>
                  <h4 className="font-semibold text-gray-900">{crop.name}</h4>
                  <p className="text-sm text-gray-600 mt-1">{crop.reason}</p>
                </div>
                <div className="bg-green-100 px-3 py-1 rounded-full">
                  <p className="text-sm font-semibold text-green-700">{crop.suitability}% Match</p>
                </div>
              </div>
              
              <div className="grid grid-cols-4 gap-3 text-xs">
                <div>
                  <p className="text-gray-500">Season</p>
                  <p className="font-semibold mt-1">{crop.season}</p>
                </div>
                <div>
                  <p className="text-gray-500">Water Need</p>
                  <p className="font-semibold mt-1">{crop.waterNeed}</p>
                </div>
                <div>
                  <p className="text-gray-500">Resilience</p>
                  <p className="font-semibold mt-1">{crop.resilience}</p>
                </div>
                <div>
                  <p className="text-gray-500">Exp. Yield</p>
                  <p className="font-semibold mt-1">{crop.expectedYield}</p>
                </div>
              </div>
              
              <button className="mt-3 w-full bg-green-600 text-white py-2 rounded-lg text-sm font-medium hover:bg-green-700 transition-colors">
                View Detailed Guide
              </button>
            </div>
          ))}
        </div>
      </div>
    </div>
  );

  const SoilHealth = () => (
    <div className="space-y-6">
      <div className="bg-white rounded-xl p-6 shadow-md">
        <h3 className="font-semibold text-lg mb-4">Soil Health Status</h3>
        
        <div className="mb-6">
          <div className="flex items-center justify-between mb-2">
            <span className="text-sm font-medium text-gray-700">Soil Moisture</span>
            <span className="text-sm font-semibold text-gray-900">{soilHealth.moisture}%</span>
          </div>
          <div className="w-full bg-gray-200 rounded-full h-3">
            <div className="bg-blue-500 h-3 rounded-full" style={{width: ${soilHealth.moisture}%}}></div>
          </div>
          <p className="text-xs text-gray-500 mt-1">Adequate for current crop</p>
        </div>

        <div className="grid grid-cols-2 gap-4 mb-6">
          <div className="bg-amber-50 p-4 rounded-lg border border-amber-200">
            <p className="text-sm text-gray-600 mb-1">pH Level</p>
            <p className="text-2xl font-bold text-gray-900">{soilHealth.ph}</p>
            <p className="text-xs text-amber-700 mt-1">Slightly acidic - Good</p>
          </div>
          
          <div className="bg-green-50 p-4 rounded-lg border border-green-200">
            <p className="text-sm text-gray-600 mb-1">Organic Matter</p>
            <p className="text-2xl font-bold text-gray-900">{soilHealth.organicMatter}%</p>
            <p className="text-xs text-green-700 mt-1">Moderate level</p>
          </div>
        </div>

        <h4 className="font-semibold text-sm text-gray-900 mb-3">Nutrient Levels</h4>
        <div className="space-y-3">
          <div className="flex items-center justify-between p-3 bg-gray-50 rounded-lg">
            <span className="text-sm font-medium text-gray-700">Nitrogen (N)</span>
            <span className="px-3 py-1 bg-yellow-100 text-yellow-800 text-xs font-semibold rounded-full">
              {soilHealth.nitrogen}
            </span>
          </div>
          <div className="flex items-center justify-between p-3 bg-gray-50 rounded-lg">
            <span className="text-sm font-medium text-gray-700">Phosphorus (P)</span>
            <span className="px-3 py-1 bg-red-100 text-red-800 text-xs font-semibold rounded-full">
              {soilHealth.phosphorus}
            </span>
          </div>
          <div className="flex items-center justify-between p-3 bg-gray-50 rounded-lg">
            <span className="text-sm font-medium text-gray-700">Potassium (K)</span>
            <span className="px-3 py-1 bg-green-100 text-green-800 text-xs font-semibold rounded-full">
              {soilHealth.potassium}
            </span>
          </div>
        </div>
      </div>

      <div className="bg-white rounded-xl p-6 shadow-md">
        <h3 className="font-semibold text-lg mb-4">Recommended Actions</h3>
        <div className="space-y-3">
          <div className="flex gap-3 p-3 bg-orange-50 rounded-lg border border-orange-200">
            <AlertTriangle className="w-5 h-5 text-orange-600 flex-shrink-0" />
            <div>
              <h4 className="font-semibold text-sm text-gray-900">Apply Phosphorus Fertilizer</h4>
              <p className="text-sm text-gray-600 mt-1">Low phosphorus detected. Apply DAP @ 50 kg/acre</p>
            </div>
          </div>
          
          <div className="flex gap-3 p-3 bg-blue-50 rounded-lg border border-blue-200">
            <Info className="w-5 h-5 text-blue-600 flex-shrink-0" />
            <div>
              <h4 className="font-semibold text-sm text-gray-900">Add Organic Matter</h4>
              <p className="text-sm text-gray-600 mt-1">Incorporate compost or green manure to improve soil structure</p>
            </div>
          </div>
        </div>
      </div>
    </div>
  );

  const WaterManagement = () => (
    <div className="space-y-6">
      <div className="bg-white rounded-xl p-6 shadow-md">
        <h3 className="font-semibold text-lg mb-4">Water Resource Status</h3>
        
        <div className="bg-blue-50 p-4 rounded-lg border border-blue-200 mb-6">
          <div className="flex items-center justify-between">
            <div>
              <p className="text-sm text-gray-600">Current Status</p>
              <p className="text-2xl font-bold text-blue-900">{waterManagement.currentStatus}</p>
            </div>
            <Droplets className="w-12 h-12 text-blue-500" />
          </div>
        </div>

        <h4 className="font-semibold text-sm text-gray-900 mb-3">Irrigation Schedule</h4>
        <div className="space-y-3 mb-6">
          <div className="flex justify-between p-3 bg-gray-50 rounded-lg">
            <span className="text-sm text-gray-700">Method</span>
            <span className="text-sm font-semibold text-gray-900">{waterManagement.irrigation.recommended}</span>
          </div>
          <div className="flex justify-between p-3 bg-gray-50 rounded-lg">
            <span className="text-sm text-gray-700">Frequency</span>
            <span className="text-sm font-semibold text-gray-900">{waterManagement.irrigation.frequency}</span>
          </div>
          <div className="flex justify-between p-3 bg-gray-50 rounded-lg">
            <span className="text-sm text-gray-700">Amount</span>
            <span className="text-sm font-semibold
